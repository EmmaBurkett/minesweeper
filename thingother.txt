import java.util.Scanner; // import the Scanner class 


public class Main {
    public static void main(String[] args) {
        int hiddenDisplayWidth = 10;
        int hiddenDisplayHight = 10;
        int universalLength = hiddenDisplayHight * hiddenDisplayWidth;
        int universalLengthBombs = universalLength / 100;
        String[][] hiddenDisplay = new String[hiddenDisplayHight][hiddenDisplayWidth];
        int[] uniqueBombLocationsCheck = new int[universalLength];
        int[] bombArray = new int[universalLength];
        int[][] bombArrayDouble = new int[hiddenDisplayHight][hiddenDisplayWidth];//; {{0,0,1}, {0,0,0}, {0,0,0}};
        Main myObject = new Main();
        myObject.populateHiddenDisplay(hiddenDisplay);
        myObject.uniqueBombPositionsCheck(uniqueBombLocationsCheck);
        myObject.getBombs(hiddenDisplay, uniqueBombLocationsCheck, bombArray, universalLength, universalLengthBombs);
        myObject.getbombArrayDouble(bombArray, bombArrayDouble);
        myObject.printBombArray(bombArray, hiddenDisplayWidth);
        myObject.game(hiddenDisplay, uniqueBombLocationsCheck, bombArrayDouble);
    }
    
    public void game(String[][] hiddenDisplay, int[] uniqueBombLocationsCheck, int[][] bombArrayDouble){
        Scanner myObject = new Scanner(System.in);
        Main myMainObject = new Main();

        System.out.println();

        boolean continueGame = true;
        int yAxis; 
        int xAxis;
        boolean outputIsZero;
        while (continueGame) {
            myMainObject.printBombArrayDouble(bombArrayDouble);
            myMainObject.printDisplay(hiddenDisplay);
            outputIsZero = true;

            System.out.println("Enter a Letter: "); 
            char xAxisLetter = myObject.next().charAt(0);
            xAxis = ((int) xAxisLetter) - 65;
            System.out.println("Enter a Number: ");
            yAxis = myObject.nextInt();
            if (bombArrayDouble[yAxis][xAxis] == 1) {
                System.out.print("Game Over.");
                continueGame = false;
            }
            else {
                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, yAxis, xAxis);
                if (hiddenDisplay[yAxis][xAxis] == "0") {
                    for (int y = yAxis, negativeY = yAxis; (y < bombArrayDouble.length || negativeY >= 0); y++, negativeY--){
                        for (int x = xAxis, negativeX = xAxis; (x < bombArrayDouble[yAxis].length || negativeX >= 0); x++, negativeX--){
                            if (y < bombArrayDouble.length && x < bombArrayDouble[y].length && (x == 0 || hiddenDisplay[y][x - 1] == "0")){ //dont be out of range and dont keep moving forward if a bomb is near
                                if (bombArrayDouble[y][x] == 0){ //Across forward all
                                    myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, y, x);
                                }
                            }
                            if (y < bombArrayDouble.length && negativeX >= 0 && (negativeX == xAxis || hiddenDisplay[y][negativeX + 1] == "0")){
                                if (y < bombArrayDouble.length && bombArrayDouble[y][negativeX] == 0){ //Backward all
                                    myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, y, negativeX);
                                }
                            }
                            if (negativeY >= 0 && x < bombArrayDouble[negativeY].length && (x == 0 || hiddenDisplay[negativeY][x - 1] == "0")){
                                if (bombArrayDouble[negativeY][x] == 0){ //Up across forward all
                                    myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, negativeY, x);
                                }
                            }
                            if (negativeY >= 0 && negativeX >= 0  && (negativeX == xAxis || hiddenDisplay[negativeY][negativeX + 1] == "0")){
                                if (y < bombArrayDouble.length && bombArrayDouble[negativeY][negativeX] == 0){ //Up Across Backward all
                                    myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, negativeY, negativeX);
                                }
                            }
                            System.out.println();
                        }
                    }
                }
            }

        }
        myObject.close();
    
    }

    public void printDisplay(String[][] hiddenDisplay) {
        char letter;
        System.out.print("    ");
        for (int i = 0; i < hiddenDisplay.length; i++){
            letter = (char)(i + 65);
            System.out.print(letter + " ");
        }
        System.out.println();
        for (int i = 0; i < hiddenDisplay.length; i++){ //prints the display for the user
            System.out.print("  " + i + " ");
            for (int j = 0; j < hiddenDisplay[i].length; j++) {
                System.out.print(hiddenDisplay[i][j] + " "); 
            }
            System.out.println();
        }
        System.out.println("");
    }

    public String[][] populateHiddenDisplay(String[][] hiddenDisplay){
        for (int i = 0; i < hiddenDisplay.length; i++){ //prints the display for the user
            for (int j = 0; j < hiddenDisplay[i].length; j++) {
                hiddenDisplay[i][j] = "\u25A0";
            }
        }
        return hiddenDisplay;
    }

    public int[] uniqueBombPositionsCheck(int[] uniqueBombLocationsCheck){
        for (int i = 0; i < uniqueBombLocationsCheck.length; i++) { //fills the array that keeps track of bomblocations and makes sure that nothing is repeated. 
            uniqueBombLocationsCheck[i] = i;
            //System.out.print(uniqueBombLocationsCheck[i] + ", ");
        }
        //System.out.println();
        return uniqueBombLocationsCheck;
    }

    public int[] getBombs(String[][] hiddenDisplay, int[] uniqueBombLocationsCheck, int[] bombArray, int universalLength, int universalLengthBombs){
        int bombPosition;

        Main myObject = new Main();
        
        for (int j = 0; j < (universalLengthBombs);){ //fills the array of bombs
            bombPosition = myObject.bombs(universalLength);
            for (int i = 0; i < uniqueBombLocationsCheck.length; i++){ //makes sure that only numbers that are in the uniqueBombLocationsCheck array are included once in the bombLocations array
                if (bombPosition == uniqueBombLocationsCheck[i]){
                    uniqueBombLocationsCheck[i] = universalLength; //this deletes the possibility of recurring numbers - specially because we start from zero lol
                    j++;
                    bombArray[bombPosition] = 1;
                }
            }
        }
        return bombArray;
    }

    public int[][] getbombArrayDouble(int[] bombArray, int[][] bombArrayDouble){
        for (int y = 0; y < bombArrayDouble.length; y++){ //prints the display for the user
            for(int x = 0; x < bombArrayDouble[y].length; x++)
                bombArrayDouble[y][x] = bombArray[x + (y * bombArrayDouble.length)];
        }
        return bombArrayDouble;
    }
    public void printBombArrayDouble(int[][] bombArrayDouble) {
        char letter;
        System.out.print("    ");
        for (int i = 0; i < bombArrayDouble.length; i++){
            letter = (char)(i + 65);
            System.out.print(letter + " ");
        }
        System.out.println();
        for (int i = 0; i < bombArrayDouble.length; i++){ //prints the display for the user
            System.out.print("  " + i + " ");
            for (int j = 0; j < bombArrayDouble[i].length; j++) {
                System.out.print(bombArrayDouble[i][j] + " "); 
            }
            System.out.println();
        }
        System.out.println("");
    }

    public void printBombArray(int[] bombArray, int hiddenDisplayWidth){
        for (int i = 0; i < bombArray.length; i++){
            if (i % hiddenDisplayWidth == 0){
                System.out.println();
            }
            System.out.print(bombArray[i] + " ");
        }
        System.out.println();
    }
    
    public int bombs(int universalLength) {
        int bombPosition = (int)(Math.random() * (universalLength - 1));  // 0 to 100
        return bombPosition;
    }

    public String[][] isBombsClose(String[][] hiddenDisplay, int[][] bombArrayDouble, int yAxis, int xAxis){
        int numberOfBombs = 0;
        if (yAxis != 0 && xAxis != 0 && bombArrayDouble[yAxis - 1][xAxis - 1] == 1){ //top left corner
            numberOfBombs += 1;
        }
        if (yAxis != 0 && bombArrayDouble[yAxis - 1][xAxis] == 1){ //top
            numberOfBombs += 1;
        }
        if (yAxis != 0 && xAxis != (bombArrayDouble[yAxis].length -1) && bombArrayDouble[yAxis - 1][xAxis + 1] == 1){ //top right corner
            numberOfBombs += 1;
        }
        if (xAxis != 0 && bombArrayDouble[yAxis][xAxis - 1] == 1){ // left side
            numberOfBombs += 1;
        }
        if (yAxis != (bombArrayDouble.length -1) && xAxis != (bombArrayDouble[yAxis].length -1) && bombArrayDouble[yAxis + 1][xAxis + 1] == 1){ //bottom right corner
            numberOfBombs += 1;
        }
        if (yAxis != (bombArrayDouble.length - 1) && bombArrayDouble[yAxis + 1][xAxis] == 1){ //bottom
            numberOfBombs += 1;
        }
        if (yAxis != (bombArrayDouble.length -1) && xAxis != 0 && bombArrayDouble[yAxis + 1][xAxis - 1] == 1){ //bottom left corner
            numberOfBombs += 1;
        }
        if (xAxis != (bombArrayDouble[yAxis].length -1) && bombArrayDouble[yAxis][xAxis + 1] == 1){ // right side
            numberOfBombs += 1;
        }
        if (numberOfBombs == 0){
            hiddenDisplay[yAxis][xAxis] = "0";
        }
        else {
            String numberOfBombs_Display = String.valueOf(numberOfBombs);
            hiddenDisplay[yAxis][xAxis] = numberOfBombs_Display;
        }
        return hiddenDisplay;
    }
    
}

/*
        System.out.println(); //orders bombs numerically which allows the 
        for (int i = 0; i < bombLocations.length; i++){
            if (i == (bombLocations.length - 1)) {
                break;
            }
            if (i != 0 && bombLocations[i] < bombLocations[i - 1]) {
                holder = bombLocations[i];
                bombLocations[i] = bombLocations[i - 1];
                bombLocations[i - 1] = holder;
            }
            else if (bombLocations[i] > bombLocations[i + 1]){
                holder = bombLocations[i];
                bombLocations[i] = bombLocations[i + 1];
                bombLocations[i + 1] = holder;
            }
        }

        //if user puts in bombLocation then end game! Do not alter the hiddenDisplay array unless triggered by user input
        
        for (int i = 0; i < bombLocations.length; i++){
            System.out.print(bombLocations[i] + ", ");
        }
        System.out.println();
        
        for(int i = 0; i < hiddenDisplay.length; i++){ // arranges the bomb array (filled with 0's and 1's) which will help in revealing many squares based on one input
            if (bombArray[i] > 0){
                bombArray[i] = 1;
                if (j != 2){
                    j++;
                }
            }
            else {
                bombArray[i] = 0;
            }
            System.out.print(bombArray[i]);
        }
        while (continueGame == true) {
            replacedDash = false;
            System.out.println("Enter Location(0-8) Enter 9 to flag: "); 
            locationReveal = myObj.nextInt();  
            if (locationReveal == 9){
                System.out.println("Enter Flag Location(0-8): "); 
                flagLocation = myObj.nextInt();  
                hiddenDisplay[flagLocation] = "# ";
                replacedDash = true;
            } 




            
            for(int i = 0; i < bombLocations.length && !replacedDash; i++){
                if (locationReveal == bombLocations[i]){
                    System.out.println("End Game");//print bomb locations
                    continueGame = false;
                    break;
                }
                else if (((locationReveal + 1) == bombLocations[i]) || ((locationReveal - 1) == bombLocations[i])){
                    hiddenDisplay[locationReveal] =  "1 ";
                    replacedDash = true;
                    break;
                }
            }
            if (!replacedDash) {
                hiddenDisplay[locationReveal] = "0 ";
                
            }
                    
            for (int i = 0; i < hiddenDisplay.length; i++){
                System.out.print(hiddenDisplay[i]); 
            }
            System.out.println();
        }*/
/*
                            if (negativeY >= 0 && x < bombArrayDouble[negativeY].length && bombArrayDouble[negativeY][x] == 0){ //Up one forward all
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, negativeY, x);
                                System.out.println("Up one forward all");
                            }
                            if (y < bombArrayDouble.length && negativeX >= 0 && bombArrayDouble[y][negativeX] == 0){ //Down one backward all
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, y, negativeX);
                                System.out.println("Down one backward all");
                            }*/
   /*
                            if (y < bombArrayDouble.length && x != (bombArrayDouble[y].length - 1) && bombArrayDouble[y][x + 1] == 0) { // forward
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, y, (x + 1));
                            }
                            else if (y < bombArrayDouble.length && x != (bombArrayDouble[y].length - 1)){
                                hiddenDisplay[y][x] = "0";
                            }
                            if (y < bombArrayDouble.length && negativeX > 0 && bombArrayDouble[y][negativeX - 1] == 0) { // backwards
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, y, (negativeX - 1));
                            }
                            else if (y < bombArrayDouble.length && negativeX > 0) {
                                hiddenDisplay[y][negativeX] = "0";
                            }
                            if (negativeY > 0 && x < bombArrayDouble[y].length && bombArrayDouble[negativeY - 1][x] == 0){ // up
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, (negativeY - 1), x);
                            }
                            else if (x < bombArrayDouble[y].length && negativeY > 0) {
                                hiddenDisplay[negativeY][x] = "0";
                            }
                            if (y != (bombArrayDouble.length - 1) && x < bombArrayDouble[y].length && bombArrayDouble[y + 1][x] == 0){ // down
                                myMainObject.isBombsClose(hiddenDisplay, bombArrayDouble, (y + 1), x);
                            }
                            else if (y != (bombArrayDouble.length - 1) && x < bombArrayDouble[y].length) {
                                hiddenDisplay[y][x] = "0";
                            }*/